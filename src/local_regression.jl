# Create noisy gaussian

# Toy example, noisy normal logpdf with means 1 and covariance 1
# Density plays role of summary statistic for local regression
# Provides simple sanity check between hessian and covariance matrix.

function noisy_normal_logpdf(Î¸::AbstractVector; Î¼::AbstractVector = [1,2,3])
    d = MvNormal(Î¼, 1)
    logpdf(d, Î¸) + rand()
end


"""
Quadratic transform. Bias term appended as first column internally.
Returns a tuple, with the matrix and the corresponding indices multiplied,
that give rise to each column. Note, indices [1, 1] corresponds to the bias
term (so indices compared to original matrix is shifted).
A bit naive so could be sped up but neat.
"""
function quadratic_transform(X::AbstractMatrix)
    X = hcat(ones(size(X)[1]), X)  # Bias
    combinations = pairwise_combinations(size(X)[2])
    result = Matrix{Float64}(undef, size(X)[1], size(combinations)[1])
    for (i, idxs) in enumerate(eachrow(combinations))
        result[:, i] = X[:, idxs[1]] .* X[:, idxs[2]]
    end
    result, combinations
end

"""
Carry out linear regression. X should have a bias column.
Returns tuple (Î², yÌ‚).
"""
# TODO: Add test for quadratic regression (e.g. use deterministic case)
# TODO also return yðŸ‘’?
function linear_regression(X::AbstractMatrix, s::AbstractVector)
    Î² = X \ s  # Linear regression
    yÌ‚ = X * Î²
    (Î² = Î², yÌ‚ = yÌ‚)
end


struct LocalÎ¼
    Î¼::Float64
    âˆ‚Î¼::Vector{Float64}
    âˆ‚Î¼Â²::Matrix{Float64}
end

# Outer constructor for getting LocalÎ¼ struct from
# quadratic regression coefficients.
function LocalÎ¼(Î²::AbstractVector, combinations::AbstractMatrix)
    # Convert Î² to matrix
    n_features = floor(Int, 1/2 * (sqrt(8*length(Î²)+1) -1) + 0.1)
    Î²_mat = Matrix{Float64}(undef, n_features, n_features)

    for (i, row) in enumerate(eachrow(combinations))
        Î²_mat[row[1], row[2]] = Î²[i]  # Upper traingular
    end
    Î²_mat = Symmetric(Î²_mat)
    LocalÎ¼(Î²_mat[1,1], Î²_mat[2:end, 1], Î²_mat[2:end, 2:end])
end



Î¸_mle = [1,2,3]
Î¸ = peturb(Î¸_mle, [0.5, 0.5, 0.5], 100)
s = noisy_normal_logpdf.(eachrow(Î¸))

# Now have Î¸ and s. Center and regress Î¸ on s:
Î¸ = Î¸ .- Î¸_mle'
Î¸, combinations = quadratic_transform(Î¸)
Î², yÌ‚ = linear_regression(Î¸, s)
Î¼ = LocalÎ¼(Î², combinations)

# Use this knowledge? https://stats.stackexchange.com/questions/68080/basic-question-about-fisher-information-matrix-and-relationship-to-hessian-and-s?rq=1
